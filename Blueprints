//
// Copyright (C) 2014 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

LIBCXXABI_SRC_FILES = [
    "src/abort_message.cpp",
    "src/cxa_aux_runtime.cpp",
    "src/cxa_default_handlers.cpp",
    "src/cxa_demangle.cpp",
    "src/cxa_exception.cpp",
    "src/cxa_exception_storage.cpp",
    "src/cxa_guard.cpp",
    "src/cxa_handlers.cpp",
    "src/cxa_new_delete.cpp",
    "src/cxa_personality.cpp",
    "src/cxa_unexpected.cpp",
    "src/cxa_vector.cpp",
    "src/cxa_virtual.cpp",
    "src/exception.cpp",
    "src/private_typeinfo.cpp",
    "src/stdexcept.cpp",
    "src/typeinfo.cpp",
]

LLVM_UNWIND_SRC_FILES = [
    "src/Unwind/libunwind.cpp",
    "src/Unwind/Unwind-EHABI.cpp",
    "src/Unwind/Unwind-sjlj.c",
    "src/Unwind/UnwindLevel1-gcc-ext.c",
    "src/Unwind/UnwindLevel1.c",
    "src/Unwind/UnwindRegistersSave.S",
    "src/Unwind/UnwindRegistersRestore.S",
]

LIBCXXABI_INCLUDES = [
    "external/libcxx/include/",
]

LIBCXXABI_LOCAL_INCLUDES = [
    "include",
]

LIBCXXABI_CPPFLAGS = [
    "-std=c++11",
    "-fexceptions",
    "-Wall",
    "-Wextra",
    "-Wno-unused-function",
    "-Werror",
]

cc_library_static {
    name: "libunwind_llvm",
    clang: true,
    arch: {
        arm: {
            srcs: LLVM_UNWIND_SRC_FILES,

            // src/Unwind/UnwindRegistersSave.S does not compile.
            clang_asflags: ["-no-integrated-as"],
        },
    },
    include_dirs: LIBCXXABI_INCLUDES,
    local_include_dirs: LIBCXXABI_LOCAL_INCLUDES,
    cppflags: LIBCXXABI_CPPFLAGS,
    stl: "none",

}

cc_library_static {
    name: "libc++abi",
    host_supported: true,
    clang: true,
    srcs: LIBCXXABI_SRC_FILES,
    include_dirs: LIBCXXABI_INCLUDES,
    local_include_dirs: LIBCXXABI_LOCAL_INCLUDES,
    cppflags: LIBCXXABI_CPPFLAGS,
    stl: "none",
    rtti: true,
    arch: {
        arm: {
            whole_static_libs: ["libunwind_llvm"],

            // src/Unwind/UnwindRegistersSave.S does not compile.
            // When src/cxa_exception.cpp is compiled with Clang assembler
            // __cxa_end_cleanup_impl, although marked as used, was discarded
            // since it is used only in embedded assembly code.
            // This caused the following warning when linking libc++.so:
            // libc++_static.a(cxa_exception.o)(.text.__cxa_end_cleanup+0x2):
            // warning: relocation refers to discarded section
            // See also http://llvm.org/bugs/show_bug.cgi?id=21292.
            clang_asflags: ["-no-integrated-as"],
            clang_cflags: ["-no-integrated-as"],
        },
        arm64: {
            whole_static_libs: ["libunwindbacktrace"],
        },
        mips: {
            whole_static_libs: ["libunwindbacktrace"],
        },
        mips64: {
            whole_static_libs: ["libunwindbacktrace"],
        },
        x86: {
            whole_static_libs: ["libunwindbacktrace"],
        },
        x86_64: {
            whole_static_libs: ["libunwindbacktrace"],
        },
    },
    target: {
        darwin: {
            srcs: LLVM_UNWIND_SRC_FILES + ["src/Unwind/Unwind_AppleExtras.cpp"],
            // libcxxabi really doesn't like the non-LLVM assembler on Darwin
            asflags: ["-integrated-as"],
            cflags: ["-integrated-as"],
            cppflags: ["-integrated-as"],
        },
    },

}
